-------------------------------------
solrconfig.xml file defines

How requests are managed and
How to manipulate data to the user.
Following are the commonly used elements in the solrconfig.xml

Data directory location
Cache parameters
Request Handlers
Search components

-------------------------------------

solr.xml file
Contains information related to SolrCloud
Includes mappings for request URLs
Identify the core
The sample solr.xml file is shown below.

Example:

<?xml version='1.0' encoding='UTF-8'?>
<solr persistent="true">
<cores adminPath="/admin/cores">
<core name="Default" instanceDir="default"/>
<core name="MC_10001_CatalogEntry_Unstructured_en_US" instanceDir="MC_10001_\en_US\CatalogEntry\unstructured"/>
<core name="MC_10001_CatalogEntry_en_US" instanceDir="MC_10001_\en_US\CatalogEntry"/>
<core name="MC_10001_CatalogGroup_en_US" instanceDir="MC_10001_\en_US\CatalogGroup"/>
</cores>
</solr>

------------------------------------------

core.properties file
core.properties: core.properties is a simple java properties file where each line in a file looks like a key=value pair.
It defines the specific properties for a core like

Name of the core
Collection the core belongs to
schema location etc.
Example:

name=<core_name>

-----------------------------------------

schema.xml file
schema.xml contains the information about

Solr fields and
How the fields are analyzed and filtered during searches.
The sample schema.xml code is shown below.

Example:

<fieldType name="wc_text" class="solr.TextField" positionIncrementGap="110">
<analyzer type="index">
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0" preserveOriginal="1"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt" />
<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
</analyzer>
</fieldType>


***********************************************************************************************************

Java Installation on Ubuntu
In order to install Java 8 on Ubuntu, you need to enable additional repository to your system. This can be achieved by executing the below commands.
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
Java 8 can be installed by executing the below command.
sudo apt-get install oracle-java8-installer
The following command helps you to set Java 8 as your default Java version.
sudo apt-get install oracle-java8-set-default
By now, java version “1.8.0_131” is installed in your System.

------------------------------------------------------------
Solr Installation on Ubuntu
The required Solr version can be downloaded from its official site. You can also download Solr 7.4.0 by executing the following command.
sudo wget http://www-eu.apache.org/dist/lucene/solr/7.4.0/solr-7.4.0.tgz
The Solr service installer shell script is extracted from the downloaded Solr archive file. The following command is used to run the installer.
tar xzf solr-7.4.0.tgz solr-7.4.0/bin/install_solr_service.sh --strip-components=2
sudo bash ./install_solr_service.sh solr-7.4.0.tgz
Now the Solr is installed on your system. You can check the status by executing the following command.
sudo service solr status

Access Solr Admin Panel
The default port for Solr is 8983.

The following link helps you to access Solr port in your browser where you will get the Solr dashboard.

https://hostname:8983/
------------------------------------------------------------

Solr Installation on Windows Environment
The following steps help you to install Solr on Windows.

Visit the homepage of Solr and click on the download button.
To get an index of Solr, select any one of the Index. From there download the file with the name Solr-7.4.0.zip.
Now the file from the downloads folder is moved to the required directory and then unzip it.
After downloading the Solr file and extracting it on C drive, you can use the following command to start the Solr.

C:\>cd solr-7.4.0/bin
C:\solr-7.4.0\bin>solr start
The Solr Installation can be verified by accessing the following link in the browser.

http://localhost:8983/
You will see the Apache Solr User interface dashboard, once the installation is successful.


------------------------------------------------

Basic Commands Used in Solr
Starting Solr:

Once the Solr is installed on your system, you need to browse to the bin folder in the Solr home directory and execute the following command to start the Solr.

sudo service solr start
Starting Solr in the foreground:

The above start command helps you to start the Solr in the background. You can also start Solr in the foreground by executing the following command.

sudo service solr start –f

Starting Solr in another port: You can start Solr in another port by using -p option of the start command followed by the port number. The command is as follows:

sudo service solr start -p <port_number>
Stopping Solr: Solr can be stopped by executing the following command.

sudo service solr stop
Restarting Solr: The restarting command stops Solr for 5 seconds and starts it again. The following command helps to restart Solr.

sudo service solr restart

Solr help command: The Solr prompt usage and its options can be checked by using the following help command.

sudo service solr -help
Solr status command: The information related to the version, memory usage, etc. of Solr can be searched and found by executing the following command.

sudo service solr status

------------------------------------------------

Solr Core is a running instance of a Lucene index which includes the whole configuration files required to use it. To perform indexing and searching operations, you need to create a core.

A Solr application can have one or multiple cores.

After installing Solr on your system, you need to connect to the Web Interface of Solr to create Solr Core.

create Solr core. This can be created in two ways.

Using create command

Using create_core command

Creating Solr Core
Using Create Command: A schema-less core can be created by using the Create Command. This can be created by executing the following command.

sudo su - solr -c "/opt/solr/bin/solr create  -c <core_name> -n data_driven_schema_configs"
Example:

sudo su - solr -c "/opt/solr/bin/solr create  -c mycollection -n data_driven_schema_configs"
Using create_core command: The create_core command has the following options.

-c core_name: describes the name of the core that you want to create

-p port_name: port at which you want to create a core

-d conf_dir: configuration directory of the port

Syntax:

sudo su - solr -c "/opt/solr/bin/solr create_core  -c <core_name> -n data_driven_schema_configs"


Deleting Solr Core
You can also delete the cores, that is created earlier.

First you need to go to bin directory and then execute the following command.

 ./solr delete -c <core_name>
For example, if you want to delete the core with a name my_solrcore, out of the two cores my_solrcore and my_solrcore1, you need to execute the below command.

 ./solr delete -c my_solrcore



------------------------------------------------------------------

Adding Documents Using Solr Web Interface
Step 1: Open the Solr Admin Interface by accessing the below link:

http://localhost:8983/
Step 2: Select the Solr Core and click document option to add the documents.

Step 3: Choose the format of the document to be indexed.

Step 4: Type the document text in the text field.

Step 5: Finally click on Submit button.

-------------------------------------------

Adding Documents Using Java Client API
The following steps help you to write Java code for adding documents.

Prepare the Solr client
  String urlString = "http://localhost:8983/Solr/<core_name>";
  SolrClient Solr = new HttpSolrClient.Builder(urlString).build();
Prepare the Solr document
  SolrInputDocument doc = new SolrInputDocument(); 
Add fields to the document
  doc.addField("id", "009"); 
  doc.addField("name", "Tom"); 
  doc.addField("age","90"); 
  doc.addField("addr","Banglore");

Add the document to Solr
  Solr.add(doc);
Save the changes
  Solr.commit(); 
  System.out.println("Documents added"); 
After writing the code, save the file with file_name.java and run the code by executing the following commands.

  javac <fileName>
  java <fileName>
You will see the below output after executing the commands.

Documents Added

-----------------------------------------------

Adding Documents Using Post Command
Solr features a post command in its bin/ directory. Hence, move the file to be indexed into the bin directory before indexing it using the post command.

Let us consider the below XML code and assume that the file is saved with the name sampleadd.xml.

<add>
<doc>
<field name = "id">001</field>
<field name = "first name">Ramu</field>
<field name = "last name">Chowdary</field>
<field name = "phone">9812365495</field>
<field name = "city">Chennai</field>
</doc>
</add>
The above XML file can be added using the post tool, by executing the following command.

./post -c <Core_Name> <file_name>


--------------------------------------------

Updating Documents Using Post Command
The following XML file helps you to update a field in the existing document.

<add>
<doc>
<field name = "id">001</field>
<field name = "first name" update = "set">Rajshekar</field>
<field name = "last name" update = "add">Chava</field>
<field name = "phone" update = "add">9956321472</field>
<field name = "city" update = "add">Pune</field>
</doc>
</add>
The fields in the documents can be updated by executing the following command.

./post -c <core_name> <file_name>

----------------------------------------------

Updating Document Using Java Client API
The following steps help you to build a Java code to update the documents.

Prepare the Solr Client
String urlString = "http://localhost:8983/Solr/my_core"; 
SolrClient Solr = new HttpSolrClient.Builder(urlString).build(); 
Prepare the Solr document
 SolrInputDocument doc = new SolrInputDocument(); 

  UpdateRequest updateRequest = new UpdateRequest();  
  updateRequest.setAction( UpdateRequest.ACTION.COMMIT, false, false);    
  SolrInputDocument myDocumentInstantlycommited = new SolrInputDocument();  
  
  myDocumentInstantlycommited.addField("id", "002"); 
  myDocumentInstantlycommited.addField("name", "Rahul"); 
  myDocumentInstantlycommited.addField("age","47"); 
  myDocumentInstantlycommited.addField("address","Chennai"); 

Update the documents
updateRequest.add( myDocumentInstantlycommited);  
Save the Changes
UpdateResponse rsp = updateRequest.process(Solr); 
System.out.println("Documents Updated");
The given code is compiled by executing the below commands

  javac fileName
  java fileName
On executing the above command, the output is displayed as below

Documents Updated
------------------------------------------------

Deleting Documents from Solr Index
Documents can be deleted from the Solr Index by specifying the document ids between the <delete> and </delete> tags.

For Example:

<delete>   
<id>003</id>
<id>005</id>
<id>004</id>
<id>002</id>
</delete>
The documents with the ids mentioned in the XML code are deleted by executing the following post command.

./post -c <core_name> <file_name>

--------------------------------------------------

Deleting a Field Using Post Command
Sometimes you need to delete a document based on the field rather than id. In that case, you need to define the name and the value of the field within <query> and </query> tags.

Syntax:

<delete> 
   <query>name:value</query> 
</delete>
Once the code is ready, you need to execute the following post command to delete a field.

./post -c <core_name> <file_name>

----------------------------------------------

Deleting All Documents Using Post command
If you want to delete all the documents in the index, you have to pass the symbol ":" between the two tags <query> and </query>.

Syntax:

<delete>
<query>*:*</query>
</delete>
Documents are deleted by executing the following command.

./post -c <core_name> <file_name>


--------------------------------------------------

Deleting Documents Using Java Client API
The following Java code helps you to delete the documents from the Apache Solr Index.

Prepare the Solr client
String urlString = "http://localhost:8983/Solr/<core_name>";
SolrClient Solr = new HttpSolrClient.Builder(urlString).build();
Prepare the Solr document
SolrInputDocument doc = new SolrInputDocument();   
Delete the documents from Solr
Solr.deleteByQuery("*");        
Save the document
Solr.commit(); 
 System.out.println("Documents deleted"); 
Run the Java code by executing the below commands.

$ javac fileName
$ java fileName
After execution, the output is shown below.

Documents deleted
------------------------------------------------


