
--custom ordering
select * from (
  select 'hello' as name, null as val from dual
  union
  select 'yelow' as name, 20 as val from dual
  union
  select 'wellow' as name, null as val from dual
  union
  select 'zello' as name, 50 as val from dual
) order by decode(val, 50, 1, null, 2, 20, 3, 4);

--another way
order by 
    case 
       when val = 50 then 1 
       when val = null then 2
       when val = 20 then 3
       else 4
    end
    
    
--handling order in nulls:
select * from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
union
select 'wellow' as name, null as val from dual
union
select 'zello' as name, 50 as val from dual
) order by val desc nulls first;

--Order by first column followed by second column
select * from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
union
select 'wellow' as name, null as val from dual
union
select 'zello' as name, 50 as val from dual
) order by 1 ASC, 2 DESC

--fetch n rows clause
select * from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
union
select 'wellow' as name, null as val from dual
union
select 'zello' as name, 50 as val from dual
) order by val
fetch first 50 percent rows only
--fetch first 3 rows only
--offset 1 rows fetch next 3 rows only
--offset 2 rows fetch 50 percent rows only
--fetch first 2 rows wth ties;

-- in case  of offset with percentage percentage will be calculated on master set and not after the offset
-- in case of fetch n rows with ties in order by val it will fetch n+1 or n+2 records in case two records have same values


--Substitution variables
-- use single ampersand to use value on run time and delete the variable after use:

select * from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
) where name = '&nam'
-- val = &val;
--This will give a prompt on SQL developer and you need to enter the value of &nam
--Use single quote for string values
--Dont use single quote for numeric values
--you can ue multiple substitution variables too like shown below:

select name, &col_name from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
union
select 'wellow' as name, null as val from dual
union
select 'zello' as name, 50 as val from dual
) where &where_clause
Order by &order_clause;

you can enter the below values in prompt:
&col_name: val
&where_clause: name = 'hello'
&order_clause: name DESC

--To avoid manually inserting this value again and again you can set this value in Define which would be valid for that whole session

DEFINE nam='hello';

select * from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
union
select 'wellow' as name, null as val from dual
union
select 'zello' as name, 50 as val from dual
) where name = '&nam';

UNDEFINE nam;

--To change the prompt message you can use the below way, variable will persist for the session:
ACCEPT NAM PROMPT 'Please enter the name of user';

select * from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
) where name = '&nam';

UNDEFINE nam;


-- If you define a variable using && then it will persist for the whole session and will not ask for its value again and again
select * from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
) where name = '&&nam';

UNDEFINE nam;
--so it assigns and defines at the same time when user is prompted for input;
-- If using double ampersand followed by single ampersand for same variable in same query then the value
will be directly transferred to the single ampersand

select &&col_name from (
select 'hello' as name, null as val from dual
union
select 'yelow' as name, 20 as val from dual
) ORDER by &col_name;

--To prevent Oracle from considering '&' as variable prompt you can set DEFINE OFF:
SET DEFINE OFF;
select * from dual where name= 'R&D'

--You can set VERIFY ON/OFF to print the SQL statement in script output before and after the substitution:
SET VERIFY ON;
select * from (
select 'hello' as name, null as val from dual
) where name = '&nam';

script output >> old: select * from (
                      select 'hello' as name, null as val from dual
                      ) where name = '&nam';
                 new: select * from (
                      select 'hello' as name, null as val from dual
                      ) where name = 'hello';

CHARACTER FUNCTIONS
---------------------
Case Conversion functions (LOWER, UPPER, INITCAP)
Character manipulation function (CONCAT, SUBSTR, LENGTH, INSTR, LPAD|RPAD, TRIM, REPLACE)

SELECT TRIM(' ' FROM ' HULK ') tab_1 from DUAL;
SELECT TRIM(LEADING ' ' FROM ' HULK ') tab_1 from DUAL;
SELECT TRIM(TRAILING ' ' FROM ' HULK ') tab_1 from DUAL;
SELECT TRIM(BOTH ' ' FROM ' HULK ') tab_1 from DUAL;
SELECT TRIM('k' FROM ' HULK ') tab_1 from DUAL;

DATES
-----------------
Date + Number: Adds no. of days to date
Date - Number: Subtracts no. of days to date
Date - Date: Subtracts date - date and returns no of days
Date + number/24: Adds number of hours to date

Date RR format: DD-MON-RR
RR takes either 20th century year or 21st century year
if RR is between 50 to 99 then it takes 19XX year. If RR is between 0 to 49 then it takes 20XX year

Select MONTHS_BETWEEN(SYSDATE, HIRE_DATE) from tab_1;
using (sysdate - hire_date)/30 will not give accurate result as all months are not of 30 days

ADD_MONTHS(sysdate, 2) or ADD_MONTHS(sysdate, -2)

NEXT_DAY(SYSDATE, 'FRIDAY') will give the next friday after given date
NEXT_DAY(SYSDATE, 2) will give next Monday after given date (As pr NLS_DATE_LANGUAGE set by DB admin it usually defaults to Sunday = 1 upto Saturday = 7)

LAST_DAY(SYSDATE) gives last date of month

ROUND(HIRE_DATE, 'MONTH') if date between 1 to 15 then returns 1st date of month. If date between 16 to 30 then returns 1st date of next month
TRUNC(HIRE_DATE, 'MONTH') Always returns 1st date of month. like 01-Feb-18

ROUND(HIRE_DATE, 'YEAR') if month between 1 to 6 then returns 1st date of year like 01-JAN-18. If month between 7 to 12 then returns 1st date of next year like 01-JAN-19
TRUNC(HIRE_DATE, 'YEAR') Always returns 1st date of year. like 01-JAN-18

SPECIFYING SUFFIX to influence number display
TH             Ordinal Number (for example DDTH for 4th)
SP             Spelled out number(for example DDSP for FOUR)
THSP or SPTH   Spelled out Ordinal Numbers(for example DDSPTH for FOURTH)

Elements of Date Format Model
YYYY    Full date in Number
YEAR    Year spelled out in English
MM      Two digit value of Montth
MONTH   MONTH Spelled out in English
DY      Three letter abbrevaiation of day of week like (FRI, SAT)
DAY     Full name of Day of week

SSSSS   Seconds past midnight (0 - 86399)

Adding 'fm' in date format removes extra spaces and unnecessary leading 0's (fm stands for format)
select to_char(sysdate, 'DD MONTH YYYY') from dual; -- 17 June      2002
select to_char(sysdate, 'DD MONTH YYYY') from dual; -- 05 January   2002

select to_char(sysdate, 'fmDD MONTH YYYY') from dual; -- 17 June 2002
select to_char(sysdate, 'fmDD MONTH YYYY') from dual; -- 5 January 2002

select to_char(sysdate, 'fmDD "of" MONTH YYYY') from dual; -- 5 of January 2002
select to_char(sysdate, 'fmDDsp "of" MONTH YYYY') from dual; -- Five of January 2002
select to_char(sysdate, 'fmDDth "of" MONTH YYYY') from dual; -- 5th of January 2002
select to_char(sysdate, 'fmDDspth "of" MONTH YYYY') from dual; -- Fifth of January 2002

fx stands for exact match..
select * from tab_1 where created_at > TO_DATE('10-11-  2012', 'dd-mm-yyyy'); -- oracle automatically removes space. space is ignored
select * from tab_1 where created_at > TO_DATE('10-11- 2012', 'fxdd-mm- yyyy'); -- exact match happens

RR format considers 00-49 as 20XX and 50-99 as 19XX whereas YY format considers everything as 20XX
('01-JAN-70', 'DD-MOM-RR') = 1 JAN 1970
('01-JAN-70', 'DD-MOM-YY') = 1 JAN 2070

NVL      => NVL(name, 'no name specified')
NVL2     => NVL2(name, 'Name Exists', 'No Name Specified')
         => If name not null then returns 'Name Exists' if name is null then returns 'No Name Specified'
NULLIF   => NULLIF(expr1, expr2) => retruns null if expr1 = expr2, returns expr1 if expr1 != expr2
         => NULLIF(length(first_name), length(last_name)) => if both are equal result will be NULL if not then result will be length of first_name
COALESCE => It retuns the first not null value among all the columns specified
         => select coalesce(first_name, middle_name, last_name) => returns first_name, middle_name or last_name depending upon which is not null from left to right
       
CASE STATEMENT
--------------------
SELECT CASE age WHEN 21 THEN 'Middle Age'
                WHEN 31 THEN 'OLD Age'
                ELSE 'Not Born yet'
       END my_column from tab_1

SELECT CASE WHEN age > 21 THEN 'Middle Age'
            WHEN age> 31 THEN 'OLD Age'
            ELSE 'Not Born yet'
       END my_column from tab_1

Else part is optional
If we dont provide else statement then the non matching case would lead to NULL value  

Similarly in DECODE function if we dont provide the last else part then the value defaults to NULL

GROUP FUNCTION
--------------------
goup_function(DISTINCT|ALL expr)
data type of functions with expr argument could be varchar2, char, number or date
Max and Min function on varchar2 column gives result according to alphabetical sorting
SUM and AVG cannot be used on VARCHAR or Dates column

COUNT(*) and COUNT(1) counts all rows (duplicates + null including)
COUNT(column_name) counts only not null values present in that column
In case u want to still count null values too then need to use NVL function inside count
COUNT(NVL(column_name, 0))
All group functions ignore null values
The min, max, avg, sum, count(column_name) functions ignore Null values

ORA-00937: Not a Single Group Group Function. Occurs when you miss to write Group By Clause and write select column_1, sum(column_2)
ORA-00979: Not a Group By Expression. This error occurs when you miss a column in group by clause and mention it in select clause
           Select column_1, column_2, sum(column_3)
           FROM Tab_1
           GROUP BY column_1
ORA-00934: Group function is not allowed here. This error occurs when we try to filter down groups in where clause instead of having clause
           like "where sum(hours) > 30"
           instead of "having sum(hours) > 30"

We cannot mention alias column_name in group by clause. However we can do that in Order clause. Select column_1 as col_1 group by column_1 order by col_1

Having clause can also be written before Group clause but not recommended

At max 2 group functions can be nested like
Select max(sum(hours))
FROM tab_1
Group by category_id

JOINS
-----------------------
ORA-00918: column ambiguously defined (This error occurs when you specify a column in select clause without table name in case of Join
----------- OLD Syntax (Oracle 8i): ---------------
EquiJoins also known as Simple Join and Inner Join
Non EquiJoins: is a type of join not commonly used which involves join condition other than equality operator like... where tab_1.col_1 between tab2.col3 and tab2.col4
               Best to use a subquery instead of Non Equijoin to achieve these cases
----------- NEW SYNTAX (1999 syntax): -------------
Cross Join: is also known as cartesian product where you just mention both the tables and do not join them on the basis of any column leading to multiplication of rows of both tables
            Old Syntax: select user_name, city from users, address
            New Syntax: Select user_name, city from users CROSS JOIN Address

Natural Join: Natural Join automatically joins on the basis of columns with same name
              If thw column_names are same between 2 tables but datatype is different then it raises an error
              In natural join you cannot prefix table name in the matched columm in select clause (write select users.name, location_id, locations.city FROM users NATURAL JOIN Locations)
              If you add table prefix in select clause for matched column then it throws error - ORA-25155 (column used in Natural Join cannot have qualifier)

USING Clause: Instead of Natural join we can use Using clause to specify the column to be used for Join. We can specify even more than one column for join.
              you cannot prefix table name in the matched columm in select clause (write select users.name, location_id, locations.city FROM users JOIN Locations USING(LOCATION_ID))


SUBQUERIES
-----------------------
SINGLE ROW SUBQUERY
When using single row operator then subquery should also return a single row.
Single row operator are =, !=, <>, >, >=, <, <=
ORA-01427: Single row subquery returns more than one row (This error occurs in case we use multiple row subquery with single row operator)

MULTIPLE ROW SUBQUERY
Multiple row subquery uses these operators (IN, ANY, ALL)
IN:     Equal to any member in the list (where age in (20, 30, 40))
ANY:    Must be preceded by =, !=, <, <=, >, >=. Returns TRUE if at least one element exists in the result set of the subquery for which the relation is TRUE (where age > ANY(20, 30, 40))
ALL:    Must be preceded by =, !=, <, <=, >, >=. Returns TRUE if relation is TRUE for all elements in the result set of Subquery (where age> ALL(20, 30, 0))

IN is equivalent to =ANY
NOT operator can be used with IN, ANY and ALL
NOT IN is equivalent to <>ALL

NULL with Subqueries
----------------------
select * from tab_1 where name = NULL; --This is wrong (use IS NULL)
select * from tab_1 where name in ('RAM', 'SHYAM', NULL); --This is OK

In case the subquery returns one NULL value then it will get ignored and rest other would be considered for filter
In case the subquery returns one NULL value and the outer clause is NOT IN. Then the whole query is going to return NO result
select * from tab_1 where name NOT IN ('RAM', 'SHYAM', NULL); --This will return No Results

EXISTS Clause
-------------------------
Select * from users where Exists (select id from locations where locations.id = users.location_id)
Select * from users where NOT Exists (select id from locations where locations.id = users.location_id)


SET Operator:
-----------------------
Queries containing Set operator are called Compound Queries
Set operator combines the result of 2 or more component queries into one result

UNION:       Rows from both after removing duplicates
UNION ALL:   Rows from both including duplicates
MINUS:       Rows in the first query that are not present in second query
INTERSECT:   Rows common in both queries
