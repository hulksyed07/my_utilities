What is Microservice?
Microservice is developed based on business features and deployed independently by an automated deployment machinery.

There is less centralized management of Microservices that may be written in various programming languages and utilize diverse data storage technologies.

---------------------------------------------------------------------
Applications are broadly classified into two types:

i) Monolithic Architecture, where an application is built as a single unit.

ii) Microservices Architecture, where many applications (microservices) handle a small portion of the functionality and data.
---------------------------------------------------------------------

Monolithic Architechture

Benefits:

Faster Initial Development - With one application, it would be relatively easy to add additional features, especially when the application is relatively small.
Little User Confusion - Developers need not have to learn about different applications, but would be focused towards one application.
Improved Integration - Features could integrate with each other well and easily.

Disadvantages:

Single Point of Failure - If any single application function or component fails, then the entire application goes down. For example - a web application with separate functions handling tasks like payment, login, and history; a function begins to consume more memory or CPU. In this scenario, the entire application will come to a halt.

Horizontal Scaling - Scaling application can only be accomplished by deploying the same EAR/WAR packages in more servers. Every single copy of the application in different servers will use the same number of primary resources, which is usually not an effective way to design.

As application grows, the code base grows with it, which can overload IDE every time it loads the application. This definitely reduces developer productivity.
Substantially less iteration - a small change made to any part of the application, requires the entire monolith to be rebuilt and deployed.
Maintenance costs will shoot up exponentially with site size.
High set-up costs - In order to get each new volunteer up and running, the larger the application, the more difficult this would be.

---------------------------------------------------------------------

Microservice Style

Build applications as suites of services (Modular approach)

Each microservice exposes a common API accessed through the network (as opposed to inter-process communication or shared memory on the same machine).

API calls are stitched mostly on the server to produce a page, although few of this work is executed by the client querying individual microservices.

Big enterprise players such as Amazon, Netflix, Uber, Yelp and eBay have adopted Microservices. Services are

Independently deployable
Scalable
Each service offers a secure module boundary, allowing different services to be written in different programming languages.

Advantages:

Improved fault isolation: Larger applications can remain largely unaffected by the failure of a single module with microservice style adoption.
Removes Dependency: Eliminates long-term commitment to any single technology stack.
Easy Understanding: With the split of functionality, it gives more room for new developers to understand the functionality of a service and make enhancements easily.
Easy Deployment: Microservices-based applications are deployed inside containers providing better management.

Disadvantages:

Complexity - Deploying microservices can be a little complex, requiring coordination among multiple services, which may not be as straightforward as deploying a monolith.
Multiple DBs - Managing multiple databases and transaction management could be painful.
Testing - Testing could be little cumbersome, as each dependent service needs to be confirmed before one can start testing.
Coordination - Handling requests across multiple independent services requires proper workflow management. There can be a scenario where one of the services may not be responding or remote calls experiencing latency.

---------------------------------------------------------------------
The three golden rules of Microservices include:

Componentize
Collaborate
Connect

---------------------------------------------------------------------

Microservice vs SOA(Service Oriented Architechture)

Miscroservice is a subset of SOA. SOA is a term covering whole Enterprise architechture which may comprise of more than one applications

     Microservice                               Service Oriented Architechture
A single Distributed system                 Large Distributed system
Accelerated Realization of Benefits         Overall Business transformation
Specialization of SOA                       Large scope spanning multiple systems


---------------------------------------------------------------------

Microservice Bullet Points:

Small Focused
Loosely coupled
Language Neutral
Bounded Context

---------------------------------------------------------------------

How do clients of a service/router know about the available instances of a service? The solution is Service Registry.

Service Registry acts as a database of services, their instances, and corresponding locations.
Service instances are registered with the service registry on startup and deregistered on shutdown.
Clients of the service/router query the service registry to find the available instances of a service.
Some of the famous service registries include - Eureka, Apache Zookeeper, Consul, etc.

-----------------------------------------------------------------------
Service instances have dynamically assigned network locations. Service instances change dynamically due to Auto-scaling, Failures and Upgrades.

The client needs Service Discovery Mechanism to over come this. There are two types of Service Discovery:

Client-side discovery
Server-side discovery
-----------------------------------------------------------------------

The clients take the onus and are responsible for determining the network locations of available service instances by querying a service registry. This is a straight forward approach.

The clients use intelligent application-specific load-balancing decisions using hashing. But on the other hand, all service clients should have this client-side service discovery logic for each programming language and framework.

Netflix OSS is a good example for this.

-----------------------------------------------------------------------

The client makes a request via a load balancer. The load balancer queries the service registry and routes each request to an available service instance.

AWS Elastic Load Balancer (ELB) is an example of a server-side discovery router.

Main benefit

Details of discovery are abstracted from the client, thus eliminating the need to implement discovery logic for each programming language and framework.
-----------------------------------------------------------------------
It functions similar to the electrical circuit breaker.

When the number of consecutive request failures crosses a threshold,

The circuit breaker trips for limited timeout period and all attempts to invoke the remote service fail immediately.
After the expiry of the timeout, the circuit breaker allows a limited number of test requests to pass through.
If the requests are successful, the circuit breaker continues normal operation. If there is a failure, the timeout period starts again.

-----------------------------------------------------------------------

Queries in a microservice architecture are implemented through Command Query Responsibility Segregation (CQRS). In CQRS, the application is split into two components:

command-side takes care of creating, updating, and deleting requests and emits events when data changes.
query-side executes queries against one or more materialized views, which are kept updated by subscribing to the stream of events released when data changes.
Takeaways

CQRS supports event driven architecture.
Few complex domains may be simpler to tackle by utilizing CQRS.
While handling high-performance applications, CQRS allows separation of a load from reads and writes, allowing to scale independently.

-----------------------------------------------------------------------

EVENt Driven architechture

The Microservices trigger and update the business entities based on any event and publishes an event when some action occurs.

For example - A payment Microservice, publishes an event when something notable happens, such as when it updates a business entity. Other microservices inventory, subscribe to those events. When a microservice gets an event, it can update its business entities, which might result in more events being published.

-----------------------------------------------------------------------

Each service instance must be offered with appropriate I/O resources, memory, and CPU. Also deploying services must be quick, cost-effective, and reliable.

Service Deployment is classified into three types-

Multiple Service Instances per Host Pattern
Service Instance per Host Pattern
Service Instance per Container Pattern

-----------------------------------------------------------------------
Multiple Service Instances per Host PatternService Instance per Host Pattern

Run multiple service instances provisioned in one or more physical or virtual hosts. The two flavors of this pattern -

Each service instance acts as process or a process group
Run multiple service instances in the same process or process group

-----------------------------------------------------------------------
Service Instance per Host Pattern

Here you package each service as a virtual machine (VM) image. e.g., Amazon EC2 AMI. Each service instance is a VM, that is launched using VM image.

Key advantages include:

Each service instance runs in complete isolation. It has a fixed amount of CPU and memory and can’t steal resources from other services.
Easy to leverage mature cloud infrastructure by leveraging features such as load balancing and auto scaling.
Netflix video streaming service is the best example for this.

-----------------------------------------------------------------------
Service Instance per Container Pattern:

Here you will package the service as a (Docker) container image and deploy each service instance as a container.

Containers are a virtualization mechanism at the operating system level. It consists of one or more processes running in a sandbox. One can limit a container’s memory and CPU resources.

Examples of container technologies include Docker and Solaris Zones.

-----------------------------------------------------------------------
Docker is becoming a prevalent way of packaging and deploying services.

Each service is packaged as a Docker image.
Each service instance is a Docker container.
Some of the popular Docker clustering frameworks include:

Kubernetes
Marathon/Mesos
Amazon EC2 Container Service
-----------------------------------------------------------------------
Key components of REST architecture style that support caching:

Client-Server - Separate the interface from the server
Client-Stateless - No client contexts stored on the server between requests
Cacheable - Clients can cache responses, but servers should be clear what could be and could not
Layered System - a client cannot identify whether this is connecting directly to the server or through an intermediary. Caches/Proxies to be transparent to the layers above them.
Code on Demand - The server can transmit the code that could be executed in the client.
Uniform Interface - URLs, URIs some of the standards to identify.
-----------------------------------------------------------------------
HTTP 1.1 has set of headers that supports caching. Cache-Control - provides a lot of attributes on caching for both responses & requests.

Responses include public, private, no-cache, no-store, no-transform, proxy-revalidate, maxage that controls the level of caching done.

Expires - mentions when the resource is stale.
-----------------------------------------------------------------------
Shared Cache
Here you will observe multiple web servers using a shared cache/proxy to access service.

This will yield better performance as some data gets cached in between. And all requests will not hit the service.
-----------------------------------------------------------------------
Distributed Cache
With multiple Cache systems, this reduces loading. Internet Cache Protocol (ICP) ensures consistency among the cache systems.
-----------------------------------------------------------------------
Local and Remote Cache
Here, there will be local cache happening within the Web server, which reduces the Network usage, there by providing very high performance.
-----------------------------------------------------------------------

The security aspect, related to the identity of the requestor services to handle the request, is taken care by API Gateway. The API Gateway authenticates the user and transfers an access token (e.g., JSON Web Token) that securely recognizes the user in each request to the services.

The access token is issued upon successful authorization which is used for authenticating all requests.
-----------------------------------------------------------------------
Token Implementions:

SAML: Security Assertion Markup Language (XML based not good for mobile as mobile does not support XML. Complex to implement)
Simple Web Token (Too simple)
JWT: JSON web token (Combination of both Simple web token and SAML)(Microsoft yahoo google together came up and accepted this)
-----------------------------------------------------------------------
High level structure of JWT token is:
headers.payload.signature

Header is base 64 encoded
Payload contains the claims that this token puts forward like (admin: true, exp: 132038938 miliseconds)
Signature contains header and payload and secret information to validate if the token is not tampered with

-----------------------------------------------------------------------

Microservice Chassis
Development of any new application, requires significant time to put in place, the mechanisms to handle cross-cutting concerns such as:

Externalized configuration - credentials, and network locations of external services such as databases and message brokers.
Logging - configuring of a logging framework (for audit trail) such as log4j or logback.
Health checks - to check the application status, a URL that a monitoring service can “ping” to determine the health of the application.
Metrics - track application performance measurements to know more about what and how the application is doing.
-----------------------------------------------------------------------
Pattern: Microservice chassis
Examples of cross-cutting concern include:

Externalized configuration - includes credentials, and network locations of external services such as databases and message brokers
Logging - configuring of a logging framework such as log4j or logback
Health checks - a url that a monitoring service can “ping” to determine the health of the application
Metrics - measurements that provide insight into what the application is doing and how it is performing
Distributed tracing - instrument services with code that assigns each external request an unique identifier that is passed between services.

-----------------------------------------------------------------------
With Microservice chassis, it becomes effortless and quick to get started with developing a microservice.

Some of the popular Microservice chassis frameworks include:

Java - Spring Boot and Spring Cloud, Dropwizard
Go - Gizmo, Micro, Go kit
Challenges Adopting to a new programming language or framework would be difficult, as there is need for microservice chassis for each programming language/framework
-----------------------------------------------------------------------
Observability patterns focus on:

Application logging
Application metrics
Audit logging
Distributed tracing
Exception tracking
Health check API

-----------------------------------------------------------------------
Application logging - Errors, warnings, information and debug messages about action are tracked in the log file.

Application metrics - Gathers statistics about individual operations of each service and aggregates metrics in centralized metrics service, for reporting and alerting.

Audit logging - Records user activity in a database.

Exception tracking - Report all exceptions to a centralized exception tracking service that aggregates and tracks exceptions and notifies developers.

Distributed tracing - Each external request is assigned a Unique ID, which is passed to all services involved in handling the request and also included in application log messages.

Health check API - Returns the health of the service. A load balancer, service registry, or monitoring service can ‘ping’ this API to verify service instance availability.
-----------------------------------------------------------------------
